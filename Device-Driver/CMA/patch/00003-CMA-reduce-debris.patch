diff -uprN old/mm/cma.c new/mm/cma.c
--- old/mm/cma.c	2019-03-04 07:21:29.000000000 +0800
+++ new/mm/cma.c	2019-12-30 14:15:34.578959121 +0800
@@ -44,6 +44,18 @@ struct cma cma_areas[MAX_CMA_AREAS];
 unsigned cma_area_count;
 static DEFINE_MUTEX(cma_mutex);
 
+struct cma *find_cma_by_name(const char *name)
+{
+	int idx;
+
+	for (idx = 0; idx < MAX_CMA_AREAS; idx++) {
+		if (!strcmp(name, cma_areas[idx].name))
+			return &cma_areas[idx];
+	}
+	return NULL;
+}
+EXPORT_SYMBOL(find_cma_by_name);
+
 phys_addr_t cma_get_base(const struct cma *cma)
 {
 	return PFN_PHYS(cma->base_pfn);
@@ -390,6 +402,37 @@ static void cma_debug_show_areas(struct
 static inline void cma_debug_show_areas(struct cma *cma) { }
 #endif
 
+#ifdef CONFIG_CMA_REDUCE_DEBRIS
+/* Reduce CMA debris 
+ *
+ * +-----------+---------------------+-------------------------------+
+ * |   < 12K   |      12K ~ 96K      |             > 96K             |
+ * +-----------+---------------------+-------------------------------+
+ * | <-small-> | <---- middle -----> | <---------- large ----------> |
+ *
+ * Layout:
+ *   small:middle:large => 1:5:9
+ */
+#define CMA_DEBRIS_12K		(3)
+#define CMA_DEBRIS_96K		(24)		
+static int cma_reduce_debris(size_t count, unsigned long bitmap_maxno)
+{
+	unsigned long middle = (bitmap_maxno) / 15;
+	unsigned long large = (bitmap_maxno) * 6 / 15;
+	unsigned long start = 0;
+
+	if (count <= CMA_DEBRIS_12K) {
+		start = 0;
+	} else if (count > CMA_DEBRIS_12K && count < CMA_DEBRIS_96K) {
+		start = middle;
+	} else if (count >= CMA_DEBRIS_96K) {
+		start = large;
+	}
+	return start;
+}
+
+#endif
+
 /**
  * cma_alloc() - allocate pages from contiguous area
  * @cma:   Contiguous memory region for which the allocation is performed.
@@ -428,15 +471,36 @@ struct page *cma_alloc(struct cma *cma,
 	if (bitmap_count > bitmap_maxno)
 		return NULL;
 
+#ifdef CONFIG_CMA_REDUCE_DEBRIS
+	start = cma_reduce_debris(count, bitmap_maxno);
+#endif
 	for (;;) {
 		mutex_lock(&cma->lock);
 		bitmap_no = bitmap_find_next_zero_area_off(cma->bitmap,
 				bitmap_maxno, start, bitmap_count, mask,
 				offset);
+
+#ifdef CONFIG_CMA_REDUCE_DEBRIS
+		if (bitmap_no >= bitmap_maxno) {
+			start = 0;
+			bitmap_no = bitmap_find_next_zero_area_off(
+					cma->bitmap,bitmap_maxno, start, 
+					bitmap_count, mask, offset);
+			if (bitmap_no < bitmap_maxno) {
+				goto normal;
+			} else {
+				mutex_unlock(&cma->lock);
+				break;
+			}
+		}
+
+normal:
+#else
 		if (bitmap_no >= bitmap_maxno) {
 			mutex_unlock(&cma->lock);
 			break;
 		}
+#endif
 		bitmap_set(cma->bitmap, bitmap_no, bitmap_count);
 		/*
 		 * It's safe to drop the lock here. We've marked this region for
